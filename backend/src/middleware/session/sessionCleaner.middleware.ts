import { Request, Response, NextFunction } from "express";
import { AuthHistoriaLogowan } from "../../models/auth/AuthHistoriaLogowan";

// Zmienna statyczna w zasiƒôgu modu≈Çu do ≈õledzenia ostatniego czyszczenia
let lastCleanup = new Date();
const CLEANUP_INTERVAL_MINUTES = 15; // Co 15 minut
const SESSION_TIMEOUT_MINUTES = 30; // Sesje starsze ni≈º 30 minut

/**
 * Middleware do automatycznego zamykania wygas≈Çych sesji logowania.
 * Jest to zwiƒÖzane z modelem AuthHistoriaLogowan.
 */
export const sessionCleaner = async (
  req: Request,
  res: Response,
  next: NextFunction,
): Promise<void> => {
  try {
    const now = new Date();
    const timeSinceLastCleanup = now.getTime() - lastCleanup.getTime();
    const cleanupIntervalMs = CLEANUP_INTERVAL_MINUTES * 60 * 1000;

    // Sprawd≈∫ czy minƒÖ≈Ç czas od ostatniego czyszczenia
    if (timeSinceLastCleanup > cleanupIntervalMs) {
      console.log("üßπ [SessionCleaner]: Automatyczne zamykanie wygas≈Çych sesji...");

      const zamknieteSesj–µ = await AuthHistoriaLogowan.zamknijWygasleSesj–µ(
        SESSION_TIMEOUT_MINUTES,
      );

      if (zamknieteSesj–µ > 0) {
        console.log(
          `‚úÖ [SessionCleaner]: Zamkniƒôto ${zamknieteSesj–µ} wygas≈Çych sesji`,
        );
      }

      lastCleanup = now; // Zaktualizuj czas ostatniego czyszczenia
    }
  } catch (error) {
    console.error(
      "‚ùå [SessionCleaner]: B≈ÇƒÖd podczas automatycznego zamykania sesji:",
      error,
    );
    // Nie przerywamy ≈ºƒÖdania z powodu b≈Çƒôdu w zarzƒÖdzaniu sesjami
  }

  next();
};
